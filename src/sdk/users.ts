/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  CreateFormAcceptEnum,
  usersCreateForm,
} from "../funcs/usersCreateForm.js";
import {
  CreateJsonAcceptEnum,
  usersCreateJson,
} from "../funcs/usersCreateJson.js";
import {
  CreateRawAcceptEnum,
  usersCreateRaw,
} from "../funcs/usersCreateRaw.js";
import {
  CreateWithListAcceptEnum,
  usersCreateWithList,
} from "../funcs/usersCreateWithList.js";
import { usersDelete } from "../funcs/usersDelete.js";
import {
  GetByNameAcceptEnum,
  usersGetByName,
} from "../funcs/usersGetByName.js";
import { LoginAcceptEnum, usersLogin } from "../funcs/usersLogin.js";
import { usersLogout } from "../funcs/usersLogout.js";
import { usersUpdateForm } from "../funcs/usersUpdateForm.js";
import { usersUpdateJson } from "../funcs/usersUpdateJson.js";
import { usersUpdateRaw } from "../funcs/usersUpdateRaw.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { CreateJsonAcceptEnum } from "../funcs/usersCreateJson.js";

export { CreateRawAcceptEnum } from "../funcs/usersCreateRaw.js";

export { CreateFormAcceptEnum } from "../funcs/usersCreateForm.js";

export { CreateWithListAcceptEnum } from "../funcs/usersCreateWithList.js";

export { LoginAcceptEnum } from "../funcs/usersLogin.js";

export { GetByNameAcceptEnum } from "../funcs/usersGetByName.js";

export class Users extends ClientSDK {
  /**
   * Create user
   *
   * @remarks
   * This can only be done by the logged in user.
   */
  async createJson(
    request?:
      | ReadableStream<Uint8Array>
      | Blob
      | ArrayBuffer
      | Uint8Array
      | undefined,
    options?: RequestOptions & { acceptHeaderOverride?: CreateJsonAcceptEnum },
  ): Promise<operations.CreateUserJsonResponse> {
    return unwrapAsync(usersCreateJson(
      this,
      request,
      options,
    ));
  }

  /**
   * Create user
   *
   * @remarks
   * This can only be done by the logged in user.
   */
  async createRaw(
    request?:
      | ReadableStream<Uint8Array>
      | Blob
      | ArrayBuffer
      | Uint8Array
      | undefined,
    options?: RequestOptions & { acceptHeaderOverride?: CreateRawAcceptEnum },
  ): Promise<operations.CreateUserRawResponse> {
    return unwrapAsync(usersCreateRaw(
      this,
      request,
      options,
    ));
  }

  /**
   * Create user
   *
   * @remarks
   * This can only be done by the logged in user.
   */
  async createForm(
    request?:
      | ReadableStream<Uint8Array>
      | Blob
      | ArrayBuffer
      | Uint8Array
      | undefined,
    options?: RequestOptions & { acceptHeaderOverride?: CreateFormAcceptEnum },
  ): Promise<operations.CreateUserFormResponse> {
    return unwrapAsync(usersCreateForm(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates list of users with given input array
   *
   * @remarks
   * Creates list of users with given input array
   */
  async createWithList(
    request?:
      | Array<ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array>
      | undefined,
    options?: RequestOptions & {
      acceptHeaderOverride?: CreateWithListAcceptEnum;
    },
  ): Promise<operations.CreateUsersWithListInputResponse | undefined> {
    return unwrapAsync(usersCreateWithList(
      this,
      request,
      options,
    ));
  }

  /**
   * Logs user into the system
   */
  async login(
    request: operations.LoginUserRequest,
    options?: RequestOptions & { acceptHeaderOverride?: LoginAcceptEnum },
  ): Promise<operations.LoginUserResponse> {
    return unwrapAsync(usersLogin(
      this,
      request,
      options,
    ));
  }

  /**
   * Logs out current logged in user session
   */
  async logout(
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(usersLogout(
      this,
      options,
    ));
  }

  /**
   * Get user by user name
   */
  async getByName(
    request: operations.GetUserByNameRequest,
    options?: RequestOptions & { acceptHeaderOverride?: GetByNameAcceptEnum },
  ): Promise<operations.GetUserByNameResponse> {
    return unwrapAsync(usersGetByName(
      this,
      request,
      options,
    ));
  }

  /**
   * Update user
   *
   * @remarks
   * This can only be done by the logged in user.
   */
  async updateJson(
    request: operations.UpdateUserJsonRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(usersUpdateJson(
      this,
      request,
      options,
    ));
  }

  /**
   * Update user
   *
   * @remarks
   * This can only be done by the logged in user.
   */
  async updateRaw(
    request: operations.UpdateUserRawRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(usersUpdateRaw(
      this,
      request,
      options,
    ));
  }

  /**
   * Update user
   *
   * @remarks
   * This can only be done by the logged in user.
   */
  async updateForm(
    request: operations.UpdateUserFormRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(usersUpdateForm(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete user
   *
   * @remarks
   * This can only be done by the logged in user.
   */
  async delete(
    request: operations.DeleteUserRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(usersDelete(
      this,
      request,
      options,
    ));
  }
}
