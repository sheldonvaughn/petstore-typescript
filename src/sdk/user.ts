/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  CreateUserFormAcceptEnum,
  userCreateUserForm,
} from "../funcs/userCreateUserForm.js";
import {
  CreateUserJsonAcceptEnum,
  userCreateUserJson,
} from "../funcs/userCreateUserJson.js";
import {
  CreateUserRawAcceptEnum,
  userCreateUserRaw,
} from "../funcs/userCreateUserRaw.js";
import {
  CreateUsersWithListInputAcceptEnum,
  userCreateUsersWithListInput,
} from "../funcs/userCreateUsersWithListInput.js";
import { userDeleteUser } from "../funcs/userDeleteUser.js";
import {
  GetUserByNameAcceptEnum,
  userGetUserByName,
} from "../funcs/userGetUserByName.js";
import { LoginUserAcceptEnum, userLoginUser } from "../funcs/userLoginUser.js";
import { userLogoutUser } from "../funcs/userLogoutUser.js";
import { userUpdateUserForm } from "../funcs/userUpdateUserForm.js";
import { userUpdateUserJson } from "../funcs/userUpdateUserJson.js";
import { userUpdateUserRaw } from "../funcs/userUpdateUserRaw.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { CreateUserJsonAcceptEnum } from "../funcs/userCreateUserJson.js";

export { CreateUserRawAcceptEnum } from "../funcs/userCreateUserRaw.js";

export { CreateUserFormAcceptEnum } from "../funcs/userCreateUserForm.js";

export { CreateUsersWithListInputAcceptEnum } from "../funcs/userCreateUsersWithListInput.js";

export { LoginUserAcceptEnum } from "../funcs/userLoginUser.js";

export { GetUserByNameAcceptEnum } from "../funcs/userGetUserByName.js";

export class User extends ClientSDK {
  /**
   * Create user
   *
   * @remarks
   * This can only be done by the logged in user.
   */
  async createUserJson(
    request?:
      | ReadableStream<Uint8Array>
      | Blob
      | ArrayBuffer
      | Uint8Array
      | undefined,
    options?: RequestOptions & {
      acceptHeaderOverride?: CreateUserJsonAcceptEnum;
    },
  ): Promise<operations.CreateUserJsonResponse> {
    return unwrapAsync(userCreateUserJson(
      this,
      request,
      options,
    ));
  }

  /**
   * Create user
   *
   * @remarks
   * This can only be done by the logged in user.
   */
  async createUserRaw(
    request?:
      | ReadableStream<Uint8Array>
      | Blob
      | ArrayBuffer
      | Uint8Array
      | undefined,
    options?: RequestOptions & {
      acceptHeaderOverride?: CreateUserRawAcceptEnum;
    },
  ): Promise<operations.CreateUserRawResponse> {
    return unwrapAsync(userCreateUserRaw(
      this,
      request,
      options,
    ));
  }

  /**
   * Create user
   *
   * @remarks
   * This can only be done by the logged in user.
   */
  async createUserForm(
    request?:
      | ReadableStream<Uint8Array>
      | Blob
      | ArrayBuffer
      | Uint8Array
      | undefined,
    options?: RequestOptions & {
      acceptHeaderOverride?: CreateUserFormAcceptEnum;
    },
  ): Promise<operations.CreateUserFormResponse> {
    return unwrapAsync(userCreateUserForm(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates list of users with given input array
   *
   * @remarks
   * Creates list of users with given input array
   */
  async createUsersWithListInput(
    request?:
      | Array<ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array>
      | undefined,
    options?: RequestOptions & {
      acceptHeaderOverride?: CreateUsersWithListInputAcceptEnum;
    },
  ): Promise<operations.CreateUsersWithListInputResponse | undefined> {
    return unwrapAsync(userCreateUsersWithListInput(
      this,
      request,
      options,
    ));
  }

  /**
   * Logs user into the system
   */
  async loginUser(
    request: operations.LoginUserRequest,
    options?: RequestOptions & { acceptHeaderOverride?: LoginUserAcceptEnum },
  ): Promise<operations.LoginUserResponse> {
    return unwrapAsync(userLoginUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Logs out current logged in user session
   */
  async logoutUser(
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(userLogoutUser(
      this,
      options,
    ));
  }

  /**
   * Get user by user name
   */
  async getUserByName(
    request: operations.GetUserByNameRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: GetUserByNameAcceptEnum;
    },
  ): Promise<operations.GetUserByNameResponse> {
    return unwrapAsync(userGetUserByName(
      this,
      request,
      options,
    ));
  }

  /**
   * Update user
   *
   * @remarks
   * This can only be done by the logged in user.
   */
  async updateUserForm(
    request: operations.UpdateUserFormRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(userUpdateUserForm(
      this,
      request,
      options,
    ));
  }

  /**
   * Update user
   *
   * @remarks
   * This can only be done by the logged in user.
   */
  async updateUserJson(
    request: operations.UpdateUserJsonRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(userUpdateUserJson(
      this,
      request,
      options,
    ));
  }

  /**
   * Update user
   *
   * @remarks
   * This can only be done by the logged in user.
   */
  async updateUserRaw(
    request: operations.UpdateUserRawRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(userUpdateUserRaw(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete user
   *
   * @remarks
   * This can only be done by the logged in user.
   */
  async deleteUser(
    request: operations.DeleteUserRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(userDeleteUser(
      this,
      request,
      options,
    ));
  }
}
