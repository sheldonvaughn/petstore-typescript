/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Order Status
 */
export const OrderStatus = {
  Placed: "placed",
  Approved: "approved",
  Delivered: "delivered",
} as const;
/**
 * Order Status
 */
export type OrderStatus = ClosedEnum<typeof OrderStatus>;

export type Order1 = {
  id?: number | undefined;
  petId?: number | undefined;
  quantity?: number | undefined;
  shipDate?: Date | undefined;
  /**
   * Order Status
   */
  status?: OrderStatus | undefined;
  complete?: boolean | undefined;
};

/** @internal */
export const OrderStatus$inboundSchema: z.ZodNativeEnum<typeof OrderStatus> = z
  .nativeEnum(OrderStatus);

/** @internal */
export const OrderStatus$outboundSchema: z.ZodNativeEnum<typeof OrderStatus> =
  OrderStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderStatus$ {
  /** @deprecated use `OrderStatus$inboundSchema` instead. */
  export const inboundSchema = OrderStatus$inboundSchema;
  /** @deprecated use `OrderStatus$outboundSchema` instead. */
  export const outboundSchema = OrderStatus$outboundSchema;
}

/** @internal */
export const Order1$inboundSchema: z.ZodType<Order1, z.ZodTypeDef, unknown> = z
  .object({
    id: z.number().int().optional(),
    petId: z.number().int().optional(),
    quantity: z.number().int().optional(),
    shipDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    status: OrderStatus$inboundSchema.optional(),
    complete: z.boolean().optional(),
  });

/** @internal */
export type Order1$Outbound = {
  id?: number | undefined;
  petId?: number | undefined;
  quantity?: number | undefined;
  shipDate?: string | undefined;
  status?: string | undefined;
  complete?: boolean | undefined;
};

/** @internal */
export const Order1$outboundSchema: z.ZodType<
  Order1$Outbound,
  z.ZodTypeDef,
  Order1
> = z.object({
  id: z.number().int().optional(),
  petId: z.number().int().optional(),
  quantity: z.number().int().optional(),
  shipDate: z.date().transform(v => v.toISOString()).optional(),
  status: OrderStatus$outboundSchema.optional(),
  complete: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Order1$ {
  /** @deprecated use `Order1$inboundSchema` instead. */
  export const inboundSchema = Order1$inboundSchema;
  /** @deprecated use `Order1$outboundSchema` instead. */
  export const outboundSchema = Order1$outboundSchema;
  /** @deprecated use `Order1$Outbound` instead. */
  export type Outbound = Order1$Outbound;
}

export function order1ToJSON(order1: Order1): string {
  return JSON.stringify(Order1$outboundSchema.parse(order1));
}

export function order1FromJSON(
  jsonString: string,
): SafeParseResult<Order1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Order1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Order1' from JSON`,
  );
}
