/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../lib/base64.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdatePetFormResponse =
  | Uint8Array
  | string
  | ReadableStream<Uint8Array>
  | Blob
  | ArrayBuffer
  | Uint8Array;

/** @internal */
export const UpdatePetFormResponse$inboundSchema: z.ZodType<
  UpdatePetFormResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  b64$.zodInbound,
  z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
]);

/** @internal */
export type UpdatePetFormResponse$Outbound =
  | Uint8Array
  | ReadableStream<Uint8Array>
  | Blob
  | ArrayBuffer
  | Uint8Array;

/** @internal */
export const UpdatePetFormResponse$outboundSchema: z.ZodType<
  UpdatePetFormResponse$Outbound,
  z.ZodTypeDef,
  UpdatePetFormResponse
> = z.union([
  b64$.zodOutbound,
  z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePetFormResponse$ {
  /** @deprecated use `UpdatePetFormResponse$inboundSchema` instead. */
  export const inboundSchema = UpdatePetFormResponse$inboundSchema;
  /** @deprecated use `UpdatePetFormResponse$outboundSchema` instead. */
  export const outboundSchema = UpdatePetFormResponse$outboundSchema;
  /** @deprecated use `UpdatePetFormResponse$Outbound` instead. */
  export type Outbound = UpdatePetFormResponse$Outbound;
}

export function updatePetFormResponseToJSON(
  updatePetFormResponse: UpdatePetFormResponse,
): string {
  return JSON.stringify(
    UpdatePetFormResponse$outboundSchema.parse(updatePetFormResponse),
  );
}

export function updatePetFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePetFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePetFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePetFormResponse' from JSON`,
  );
}
