/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateUserRawRequest = {
  /**
   * name that needs to be updated
   */
  username: string;
  /**
   * Update an existent user in the store
   */
  user?:
    | ReadableStream<Uint8Array>
    | Blob
    | ArrayBuffer
    | Uint8Array
    | undefined;
};

/** @internal */
export const UpdateUserRawRequest$inboundSchema: z.ZodType<
  UpdateUserRawRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  username: z.string(),
  User: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "User": "user",
  });
});

/** @internal */
export type UpdateUserRawRequest$Outbound = {
  username: string;
  User?:
    | ReadableStream<Uint8Array>
    | Blob
    | ArrayBuffer
    | Uint8Array
    | undefined;
};

/** @internal */
export const UpdateUserRawRequest$outboundSchema: z.ZodType<
  UpdateUserRawRequest$Outbound,
  z.ZodTypeDef,
  UpdateUserRawRequest
> = z.object({
  username: z.string(),
  user: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    user: "User",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRawRequest$ {
  /** @deprecated use `UpdateUserRawRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRawRequest$inboundSchema;
  /** @deprecated use `UpdateUserRawRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateUserRawRequest$outboundSchema;
  /** @deprecated use `UpdateUserRawRequest$Outbound` instead. */
  export type Outbound = UpdateUserRawRequest$Outbound;
}

export function updateUserRawRequestToJSON(
  updateUserRawRequest: UpdateUserRawRequest,
): string {
  return JSON.stringify(
    UpdateUserRawRequest$outboundSchema.parse(updateUserRawRequest),
  );
}

export function updateUserRawRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserRawRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserRawRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserRawRequest' from JSON`,
  );
}
