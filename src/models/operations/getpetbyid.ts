/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../lib/base64.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetPetByIdSecurity = {
  apiKey?: string | undefined;
  petstoreAuth?: string | undefined;
};

export type GetPetByIdRequest = {
  /**
   * ID of pet to return
   */
  petId: number;
};

export type GetPetByIdResponse = components.Pet2 | Uint8Array | string;

/** @internal */
export const GetPetByIdSecurity$inboundSchema: z.ZodType<
  GetPetByIdSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  api_key: z.string().optional(),
  petstore_auth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "api_key": "apiKey",
    "petstore_auth": "petstoreAuth",
  });
});

/** @internal */
export type GetPetByIdSecurity$Outbound = {
  api_key?: string | undefined;
  petstore_auth?: string | undefined;
};

/** @internal */
export const GetPetByIdSecurity$outboundSchema: z.ZodType<
  GetPetByIdSecurity$Outbound,
  z.ZodTypeDef,
  GetPetByIdSecurity
> = z.object({
  apiKey: z.string().optional(),
  petstoreAuth: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    apiKey: "api_key",
    petstoreAuth: "petstore_auth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPetByIdSecurity$ {
  /** @deprecated use `GetPetByIdSecurity$inboundSchema` instead. */
  export const inboundSchema = GetPetByIdSecurity$inboundSchema;
  /** @deprecated use `GetPetByIdSecurity$outboundSchema` instead. */
  export const outboundSchema = GetPetByIdSecurity$outboundSchema;
  /** @deprecated use `GetPetByIdSecurity$Outbound` instead. */
  export type Outbound = GetPetByIdSecurity$Outbound;
}

export function getPetByIdSecurityToJSON(
  getPetByIdSecurity: GetPetByIdSecurity,
): string {
  return JSON.stringify(
    GetPetByIdSecurity$outboundSchema.parse(getPetByIdSecurity),
  );
}

export function getPetByIdSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetPetByIdSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPetByIdSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPetByIdSecurity' from JSON`,
  );
}

/** @internal */
export const GetPetByIdRequest$inboundSchema: z.ZodType<
  GetPetByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  petId: z.number().int(),
});

/** @internal */
export type GetPetByIdRequest$Outbound = {
  petId: number;
};

/** @internal */
export const GetPetByIdRequest$outboundSchema: z.ZodType<
  GetPetByIdRequest$Outbound,
  z.ZodTypeDef,
  GetPetByIdRequest
> = z.object({
  petId: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPetByIdRequest$ {
  /** @deprecated use `GetPetByIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetPetByIdRequest$inboundSchema;
  /** @deprecated use `GetPetByIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetPetByIdRequest$outboundSchema;
  /** @deprecated use `GetPetByIdRequest$Outbound` instead. */
  export type Outbound = GetPetByIdRequest$Outbound;
}

export function getPetByIdRequestToJSON(
  getPetByIdRequest: GetPetByIdRequest,
): string {
  return JSON.stringify(
    GetPetByIdRequest$outboundSchema.parse(getPetByIdRequest),
  );
}

export function getPetByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPetByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPetByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPetByIdRequest' from JSON`,
  );
}

/** @internal */
export const GetPetByIdResponse$inboundSchema: z.ZodType<
  GetPetByIdResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Pet2$inboundSchema, b64$.zodInbound]);

/** @internal */
export type GetPetByIdResponse$Outbound = components.Pet2$Outbound | Uint8Array;

/** @internal */
export const GetPetByIdResponse$outboundSchema: z.ZodType<
  GetPetByIdResponse$Outbound,
  z.ZodTypeDef,
  GetPetByIdResponse
> = z.union([components.Pet2$outboundSchema, b64$.zodOutbound]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPetByIdResponse$ {
  /** @deprecated use `GetPetByIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetPetByIdResponse$inboundSchema;
  /** @deprecated use `GetPetByIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetPetByIdResponse$outboundSchema;
  /** @deprecated use `GetPetByIdResponse$Outbound` instead. */
  export type Outbound = GetPetByIdResponse$Outbound;
}

export function getPetByIdResponseToJSON(
  getPetByIdResponse: GetPetByIdResponse,
): string {
  return JSON.stringify(
    GetPetByIdResponse$outboundSchema.parse(getPetByIdResponse),
  );
}

export function getPetByIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetPetByIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPetByIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPetByIdResponse' from JSON`,
  );
}
