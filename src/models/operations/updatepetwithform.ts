/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdatePetWithFormRequest = {
  /**
   * ID of pet that needs to be updated
   */
  petId: number;
  /**
   * Name of pet that needs to be updated
   */
  name?: string | undefined;
  /**
   * Status of pet that needs to be updated
   */
  status?: string | undefined;
};

/** @internal */
export const UpdatePetWithFormRequest$inboundSchema: z.ZodType<
  UpdatePetWithFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  petId: z.number().int(),
  name: z.string().optional(),
  status: z.string().optional(),
});

/** @internal */
export type UpdatePetWithFormRequest$Outbound = {
  petId: number;
  name?: string | undefined;
  status?: string | undefined;
};

/** @internal */
export const UpdatePetWithFormRequest$outboundSchema: z.ZodType<
  UpdatePetWithFormRequest$Outbound,
  z.ZodTypeDef,
  UpdatePetWithFormRequest
> = z.object({
  petId: z.number().int(),
  name: z.string().optional(),
  status: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePetWithFormRequest$ {
  /** @deprecated use `UpdatePetWithFormRequest$inboundSchema` instead. */
  export const inboundSchema = UpdatePetWithFormRequest$inboundSchema;
  /** @deprecated use `UpdatePetWithFormRequest$outboundSchema` instead. */
  export const outboundSchema = UpdatePetWithFormRequest$outboundSchema;
  /** @deprecated use `UpdatePetWithFormRequest$Outbound` instead. */
  export type Outbound = UpdatePetWithFormRequest$Outbound;
}

export function updatePetWithFormRequestToJSON(
  updatePetWithFormRequest: UpdatePetWithFormRequest,
): string {
  return JSON.stringify(
    UpdatePetWithFormRequest$outboundSchema.parse(updatePetWithFormRequest),
  );
}

export function updatePetWithFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePetWithFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePetWithFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePetWithFormRequest' from JSON`,
  );
}
