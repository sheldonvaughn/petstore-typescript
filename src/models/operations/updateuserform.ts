/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateUserFormRequest = {
  /**
   * name that needs to be updated
   */
  username: string;
  /**
   * Update an existent user in the store
   */
  user?: components.User2 | undefined;
};

/** @internal */
export const UpdateUserFormRequest$inboundSchema: z.ZodType<
  UpdateUserFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  username: z.string(),
  User: components.User2$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "User": "user",
  });
});

/** @internal */
export type UpdateUserFormRequest$Outbound = {
  username: string;
  User?: components.User2$Outbound | undefined;
};

/** @internal */
export const UpdateUserFormRequest$outboundSchema: z.ZodType<
  UpdateUserFormRequest$Outbound,
  z.ZodTypeDef,
  UpdateUserFormRequest
> = z.object({
  username: z.string(),
  user: components.User2$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    user: "User",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserFormRequest$ {
  /** @deprecated use `UpdateUserFormRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateUserFormRequest$inboundSchema;
  /** @deprecated use `UpdateUserFormRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateUserFormRequest$outboundSchema;
  /** @deprecated use `UpdateUserFormRequest$Outbound` instead. */
  export type Outbound = UpdateUserFormRequest$Outbound;
}

export function updateUserFormRequestToJSON(
  updateUserFormRequest: UpdateUserFormRequest,
): string {
  return JSON.stringify(
    UpdateUserFormRequest$outboundSchema.parse(updateUserFormRequest),
  );
}

export function updateUserFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserFormRequest' from JSON`,
  );
}
