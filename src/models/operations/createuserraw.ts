/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../lib/base64.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateUserRawResponse =
  | ReadableStream<Uint8Array>
  | Blob
  | ArrayBuffer
  | Uint8Array
  | Uint8Array
  | string;

/** @internal */
export const CreateUserRawResponse$inboundSchema: z.ZodType<
  CreateUserRawResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
  b64$.zodInbound,
]);

/** @internal */
export type CreateUserRawResponse$Outbound =
  | ReadableStream<Uint8Array>
  | Blob
  | ArrayBuffer
  | Uint8Array
  | Uint8Array;

/** @internal */
export const CreateUserRawResponse$outboundSchema: z.ZodType<
  CreateUserRawResponse$Outbound,
  z.ZodTypeDef,
  CreateUserRawResponse
> = z.union([
  z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
  b64$.zodOutbound,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserRawResponse$ {
  /** @deprecated use `CreateUserRawResponse$inboundSchema` instead. */
  export const inboundSchema = CreateUserRawResponse$inboundSchema;
  /** @deprecated use `CreateUserRawResponse$outboundSchema` instead. */
  export const outboundSchema = CreateUserRawResponse$outboundSchema;
  /** @deprecated use `CreateUserRawResponse$Outbound` instead. */
  export type Outbound = CreateUserRawResponse$Outbound;
}

export function createUserRawResponseToJSON(
  createUserRawResponse: CreateUserRawResponse,
): string {
  return JSON.stringify(
    CreateUserRawResponse$outboundSchema.parse(createUserRawResponse),
  );
}

export function createUserRawResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateUserRawResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUserRawResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUserRawResponse' from JSON`,
  );
}
