/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../lib/base64.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddPetFormResponse = components.Pet2 | Uint8Array | string;

/** @internal */
export const AddPetFormResponse$inboundSchema: z.ZodType<
  AddPetFormResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Pet2$inboundSchema, b64$.zodInbound]);

/** @internal */
export type AddPetFormResponse$Outbound = components.Pet2$Outbound | Uint8Array;

/** @internal */
export const AddPetFormResponse$outboundSchema: z.ZodType<
  AddPetFormResponse$Outbound,
  z.ZodTypeDef,
  AddPetFormResponse
> = z.union([components.Pet2$outboundSchema, b64$.zodOutbound]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddPetFormResponse$ {
  /** @deprecated use `AddPetFormResponse$inboundSchema` instead. */
  export const inboundSchema = AddPetFormResponse$inboundSchema;
  /** @deprecated use `AddPetFormResponse$outboundSchema` instead. */
  export const outboundSchema = AddPetFormResponse$outboundSchema;
  /** @deprecated use `AddPetFormResponse$Outbound` instead. */
  export type Outbound = AddPetFormResponse$Outbound;
}

export function addPetFormResponseToJSON(
  addPetFormResponse: AddPetFormResponse,
): string {
  return JSON.stringify(
    AddPetFormResponse$outboundSchema.parse(addPetFormResponse),
  );
}

export function addPetFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<AddPetFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddPetFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddPetFormResponse' from JSON`,
  );
}
