/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { PetstoreCore } from "../core.js";
import { encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { resolveSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { APIError } from "../models/errors/apierror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { Result } from "../types/fp.js";

export enum GetAcceptEnum {
  applicationJson = "application/json",
  applicationXml = "application/xml",
}

/**
 * Find pet by ID
 *
 * @remarks
 * Returns a single pet
 */
export async function petsGet(
  client: PetstoreCore,
  security: operations.GetPetByIdSecurity,
  request: operations.GetPetByIdRequest,
  options?: RequestOptions & { acceptHeaderOverride?: GetAcceptEnum },
): Promise<
  Result<
    operations.GetPetByIdResponse,
    | errors.Unauthorized
    | errors.Timeout
    | errors.BadRequest
    | errors.RateLimited
    | errors.InternalServerError
    | errors.NotFound
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  const parsed = safeParse(
    request,
    (value) => operations.GetPetByIdRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return parsed;
  }
  const payload = parsed.value;
  const body = null;

  const pathParams = {
    petId: encodeSimple("petId", payload.petId, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/pet/{petId}")(pathParams);

  const headers = new Headers({
    Accept: options?.acceptHeaderOverride
      || "application/json;q=1, application/xml;q=0",
  });

  const requestSecurity = resolveSecurity(
    [
      {
        fieldName: "api_key",
        type: "apiKey:header",
        value: security?.apiKey,
      },
    ],
    [
      {
        fieldName: "Authorization",
        type: "oauth2",
        value: security?.petstoreAuth,
      },
    ],
  );

  const context = {
    operationID: "getPetById",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || {
        strategy: "backoff",
        backoff: {
          initialInterval: 500,
          maxInterval: 60000,
          exponent: 1.5,
          maxElapsedTime: 3600000,
        },
        retryConnectionErrors: true,
      }
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["5XX"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "GET",
    path: path,
    headers: headers,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return requestRes;
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: [
      "400",
      "401",
      "403",
      "404",
      "407",
      "408",
      "413",
      "414",
      "415",
      "422",
      "429",
      "431",
      "4XX",
      "500",
      "501",
      "502",
      "503",
      "504",
      "505",
      "506",
      "507",
      "508",
      "510",
      "511",
      "5XX",
    ],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return doResult;
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    operations.GetPetByIdResponse,
    | errors.Unauthorized
    | errors.Timeout
    | errors.BadRequest
    | errors.RateLimited
    | errors.InternalServerError
    | errors.NotFound
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.bytes(200, operations.GetPetByIdResponse$inboundSchema, {
      ctype: "application/xml",
    }),
    M.json(200, operations.GetPetByIdResponse$inboundSchema),
    M.fail([400, 404, "4XX", "5XX"]),
    M.jsonErr([401, 403, 407, 511], errors.Unauthorized$inboundSchema),
    M.jsonErr([408, 504], errors.Timeout$inboundSchema),
    M.jsonErr([413, 414, 415, 422, 431, 510], errors.BadRequest$inboundSchema),
    M.jsonErr(429, errors.RateLimited$inboundSchema),
    M.jsonErr(
      [500, 502, 503, 506, 507, 508],
      errors.InternalServerError$inboundSchema,
    ),
    M.jsonErr([501, 505], errors.NotFound$inboundSchema),
  )(response, { extraFields: responseFields });
  if (!result.ok) {
    return result;
  }

  return result;
}
